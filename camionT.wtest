import camion.*
import cosas.*

describe "Test trasporte" {
  var camion1

  method inicializar(){
      camion1 = new Camion(pesoMax = 2500, tara = 1000)

  }
  test "No Puede transportar porque no tengo espacio en almacen y aparte por condiciones por ruta 9" {
    self.inicializar()
    camion1.cargar(bumblebee) //es robot --> nivelPeligrosidad = 30, peso = 800
    camion1.cargar(knightRider) // --> nivelPeligrosidad = 10, peso = 500

    assert.equals(3, camion1.totalBultos()) // 2 d bumblebee + 1 d knightRider

    assert.equals(2300, camion1.pesoTotal())//peso total camion1 = 2300
    assert.notThat(camion1.puedeCircularEnRuta(11))
    
    almacen.cargar(arenaAGranel) //-> nivelPeligrosidad = 1, peso = 0, totalBultos = 1
    //assert.equals(1, almacen.totalBultos())

  //  camion1.transportar(almacen, ruta9 ) //--> FALSO x espacio en almasen y la peligrosidad de bumblebee
    assert.throwsExceptionWithMessage("No puede transportar a destino porque no hay espacio en almacen",{camion1.transportar(almacen, ruta9 )})

    assert.equals(#{arenaAGranel}, almacen.almacenaje())
    assert.equals(#{bumblebee,knightRider}, camion1.cosas())

  }
    test "Puede transportar por Camino Vecinal y tengo espacio en almacen" {
    self.inicializar()

    camion1.cargar(bumblebee) //es robot --> nivelPeligrosidad = 30, peso = 800
    camion1.cargar(knightRider) // --> nivelPeligrosidad = 10, peso = 500
    assert.equals(3, camion1.totalBultos()) // 2 d bumblebee + 1 d knightRider

    assert.equals(2300, camion1.pesoTotal())//peso total camion1 = 2300
    assert.notThat(camion1.puedeCircularEnRuta(11))

    almacen.bultosMax(100)
    almacen.cargar(arenaAGranel) //-> nivelPeligrosidad = 1, peso = 0, totalBultos = 1
    assert.equals(1, almacen.totalBultos())

    camion1.transportar(almacen, caminoVecinal ) //--> TRUE xq caminoVecinal soporta 5000 segun lo q le puse

    assert.equals(#{arenaAGranel,bumblebee,knightRider}, almacen.almacenaje())
    assert.equals(#{}, camion1.cosas())

  }

  test "No puede transportar por ruta9" {
    self.inicializar()
    
    camion1.cargar(bumblebee) //es robot --> nivelPeligrosidad = 30, peso = 800
    camion1.cargar(knightRider) // --> nivelPeligrosidad = 10, peso = 500
    assert.equals(3, camion1.totalBultos()) // 2 d bumblebee + 1 d knightRider
    almacen.bultosMax(50)

    assert.equals(2300, camion1.pesoTotal())//peso total camion1 = 2300

  //  camion1.transportar(almacen, ruta9 ) //--> NO, x la peligrosidad de bumblebee
    assert.throwsExceptionWithMessage("El camino no es apto para el transporte",{camion1.transportar(almacen, ruta9 )})

    assert.equals(#{}, almacen.almacenaje())
    assert.equals(#{bumblebee,knightRider}, camion1.cosas())
  
  }
  test "No puede transportar por caminoVecinal" {
    self.inicializar()

    camion1.cargar(bumblebee) //es robot --> nivelPeligrosidad = 30, peso = 800
    camion1.cargar(knightRider) // --> nivelPeligrosidad = 10, peso = 500
    assert.equals(3, camion1.totalBultos()) // 2 d bumblebee + 1 d knightRider

    caminoVecinal.pesoSoportado(2000)
    assert.equals(2300, camion1.pesoTotal())//peso total camion1 = 2300

    assert.throwsExceptionWithMessage("El camino no es apto para el transporte",{camion1.transportar(almacen, caminoVecinal)})

    assert.equals(#{}, almacen.almacenaje())
    assert.equals(#{bumblebee,knightRider}, camion1.cosas())
  
  }
}


describe "Prueba de cosas" {
  var camion1

  method inicializar(){
      camion1 = new Camion(pesoMax = 2500, tara = 1000)
  }
  test "bumblebee robot" {
    self.inicializar()

    //la agrego al camion1 y veo si cambia peso y otros
    camion1.cargar(bumblebee) //es robot --> nivelPeligrosidad = 30, peso = 800
    assert.equals(robot, bumblebee.estado())
    assert.equals(30, bumblebee.nivelPeligrosidad())
    assert.equals(800, bumblebee.peso())
  }

  test "bumblebee auto" {
    self.inicializar()

    //la agrego al camion1 y veo si cambia peso y otros

    bumblebee.estado(auto) //es auto --> nivelPeligrosidad = 15, peso = 800
    assert.equals(auto, bumblebee.estado())
    assert.equals(15, bumblebee.nivelPeligrosidad())
    assert.equals(800, bumblebee.peso())
  }
  test "paqueteDeLadrillos" {
    self.inicializar()

    assert.equals(0, paqueteDeLadrillos.cantLadrillos())
    camion1.cargar(paqueteDeLadrillos) // se suman 12 ladrillos 
    assert.equals(12, paqueteDeLadrillos.cantLadrillos())
    camion1.cargar(paqueteDeLadrillos) // se suman 12 ladrillos
    assert.equals(24, paqueteDeLadrillos.cantLadrillos())

    assert.equals(1, paqueteDeLadrillos.bulto())
    
    paqueteDeLadrillos.cantLadrillos(500)
    assert.equals(3, paqueteDeLadrillos.bulto())

  }
  test "arenaAGranel" {
    self.inicializar()

    //la agrego al camion1 y veo si cambia peso
    camion1.cargar(arenaAGranel)
    assert.equals(20, arenaAGranel.peso())
    camion1.cargar(arenaAGranel)
    assert.equals(40, arenaAGranel.peso())

    assert.equals(1, arenaAGranel.bulto())
    assert.equals(1, arenaAGranel.nivelPeligrosidad())


  }
  test "bateriaAntiaerea CON Misil" {
    self.inicializar()

    camion1.cargar(bateriaAntiaerea)

    assert.equals(tieneMisil, bateriaAntiaerea.estado())
    assert.equals(300, bateriaAntiaerea.peso())
    assert.equals(100, bateriaAntiaerea.nivelPeligrosidad())
    assert.equals(2, bateriaAntiaerea.bulto()) 
  }
    test "bateriaAntiaerea SIN Misil" {
    self.inicializar()

    bateriaAntiaerea.estado(noTieneMisil)

    assert.equals(200, bateriaAntiaerea.peso())
    assert.equals(0, bateriaAntiaerea.nivelPeligrosidad())
    assert.equals(1, bateriaAntiaerea.bulto())
    
  }
  test "contenedor" {
    self.inicializar()

    //agregar al contenedor paqueteDeLadrillos y bateriaAntiaerea

    contenedor.cargar(paqueteDeLadrillos)
    contenedor.cargar(bateriaAntiaerea)

    assert.equals(400, contenedor.peso()) // 100+ 0 de ladrillos + 300 d bat xq tiene misil
    assert.equals(100, contenedor.nivelPeligrosidad()) //2 ladrillos y 100 x bat devuelve el mas grande

    assert.equals(4, contenedor.bulto()) // 1 x el contenedor + 1 x ladrillos + 2 x bat co nmisil
  }
  test "residuosRadioactivos" {
    self.inicializar()

    assert.equals(0, residuosRadioactivos.peso())
    assert.equals(200, residuosRadioactivos.nivelPeligrosidad())
    assert.equals(1, residuosRadioactivos.bulto())

    camion1.cargar(residuosRadioactivos)
    assert.equals(15, residuosRadioactivos.peso())
    assert.equals(200, residuosRadioactivos.nivelPeligrosidad())
    assert.equals(1, residuosRadioactivos.bulto())
  
  }
  test "embalajeDeSeguridad" {
    self.inicializar()

    embalajeDeSeguridad.cosa(bumblebee) //es auto --> nivelPeligrosidad = 15, peso = 800
    assert.equals(800, embalajeDeSeguridad.peso())
    assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())
    assert.equals(2, embalajeDeSeguridad.bulto())    
  }

}

describe "Prueba camion1" {
  var camion1

  method inicializar(){
      camion1 = new Camion(pesoMax = 2500, tara = 1000)

  }
  test "descargar" {
    self.inicializar()

    camion1.cargar(bumblebee)
    camion1.cargar(bateriaAntiaerea)
    
    assert.that(camion1.cosas().contains(bateriaAntiaerea))
    assert.that(camion1.cosas().contains(bumblebee))

    camion1.descargar(bateriaAntiaerea)

    assert.that(camion1.cosas().contains(bumblebee))
    assert.notThat(camion1.cosas().contains(bateriaAntiaerea))

  }

  test "todoPesoPar" {
    self.inicializar()

    camion1.cargar(bumblebee)
    camion1.cargar(bateriaAntiaerea)
    
    assert.that(camion1.todoPesoPar())
  }
    test "hayAlgunoQuePesa" {
    self.inicializar()

    camion1.cargar(bumblebee)
    camion1.cargar(bateriaAntiaerea)
    
    assert.that(camion1.hayAlgunoQuePesa(800)) // 800 bumble y 300 bateria
    assert.notThat(camion1.hayAlgunoQuePesa(200)) // 800 bumble y 300 bateria
  }

  test "elDeNivel" {
    self.inicializar()

    camion1.cargar(bumblebee) //es robot
    camion1.cargar(bateriaAntiaerea)
    
    assert.equals(bumblebee, camion1.elDeNivel(30)) // 30 bumble y 100 bateria
    assert.equals(bateriaAntiaerea, camion1.elDeNivel(100)) // 30 bumble y 100 bateria
 
    assert.throwsExceptionWithMessage("No hay elemento con ese nivel de peligrosidad", {camion1.elDeNivel(50)})
  }
  test "excedidoDePeso" { //pruebo pesoTotal por el metodo excedidoDePeso
    self.inicializar()

    camion1.cargar(bumblebee) //es robot -> pesa 800
    camion1.cargar(bateriaAntiaerea) // peso -> 300
    
    assert.notThat(camion1.excedidoDePeso()) // 800 + 300 = 1100
  }

  test "objetosMasPeligrososQue" { //pruebo objetosQueSuperanPeligrosidad xq la uso dentro del metodo objetosMasPeligrososQue
    self.inicializar()
    camion1.cargar(bumblebee) //es robot -> pelig 30
    camion1.cargar(bateriaAntiaerea) // pelig -> 100
    
    assert.equals(#{bumblebee,bateriaAntiaerea}, camion1.objetosMasPeligrososQue(arenaAGranel)) // arena --> pelig 1
  }

  test "puedeCircularEnRuta" { //pruebo noExistenCosasQueSuperenElMaxDePeligrosidad xq la uso dentro del metodo objetosMasPeligrososQue
    self.inicializar()
    camion1.cargar(bumblebee) //es robot -> pelig 30
    camion1.cargar(bateriaAntiaerea) // pelig -> 100
    
    assert.that( camion1.puedeCircularEnRuta(120)) // 

    assert.notThat(camion1.puedeCircularEnRuta(50)) // 

  }
  test "tieneAlgoQuePesaEntre" { 
    self.inicializar()
    camion1.cargar(bumblebee) //es robot -> pesa 800
    camion1.cargar(bateriaAntiaerea) // peso -> 300
    
    assert.that( camion1.tieneAlgoQuePesaEntre(200,500)) // 

    assert.notThat(camion1.tieneAlgoQuePesaEntre(200, 220)) // 

  }
  test "cosaMasPesada" { 
    self.inicializar()

    assert.equals( , camion1.cosaMasPesada()) //está bien q no haya nada como value x como la programé


    camion1.cargar(bumblebee) //es robot -> pesa 800
    camion1.cargar(bateriaAntiaerea) // peso -> 300
    
    assert.equals( bumblebee, camion1.cosaMasPesada())  

  }

  test "pesos" { 
    self.inicializar()

    assert.equals([] , camion1.pesos())

    camion1.cargar(bumblebee) //es robot -> pesa 800
    camion1.cargar(bateriaAntiaerea) // peso -> 300
    
    assert.equals([800, 300], camion1.pesos()) 
 
  }

//el resto de metodos son probados cuando hice los test de transportar

}


